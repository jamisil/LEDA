package sorting.linearSorting;

import sorting.AbstractSorting;

/**
 * Classe que implementa a estratégia de Counting Sort vista em sala.
 *
 * Procure evitar desperdício de memória: AO INVÉS de alocar o array de
 * contadores com um tamanho arbitrariamente grande (por exemplo, com o maior
 * valor de entrada possível), aloque este array com o tamanho sendo o máximo
 * inteiro presente no array a ser ordenado.
 *
 * Seu algoritmo deve assumir que o array de entrada nao possui numeros
 * negativos, ou seja, possui apenas numeros inteiros positivos e o zero.
 *
 */
public class CountingSort extends AbstractSorting<Integer> {

	@Override
	public void sort(Integer[] array, int leftIndex, int rightIndex) {
		if (array != null && leftIndex < rightIndex && rightIndex < array.length && leftIndex >= 0) {
			int max = maxim(array, leftIndex, rightIndex);

			int[] C = new int[max + 1]; // considerando o zero
			
			// "anotando" a frequência
			for (int i = leftIndex; i <= rightIndex; i++) {
				C[array[i]]++;
			}
			// acumulando de maneira a determinar quantos elementos são menores até
			// determinado indice
			for (int j = 1; j < C.length; j++) {
				C[j] += C[j - 1];
			}
			
			// criando o array que vai inserir os numeros de maneira ordenada
			int[] B = new int[rightIndex - leftIndex + 1];

			for (int k = rightIndex; k >= leftIndex; k--) {
				B[C[array[k]] - 1] = array[k];
				C[array[k]]--;
			}
			
			// modificando o array original de forma ordenada
			for (int z = leftIndex; z <= rightIndex; z++) {
				array[z] = B[z - leftIndex];
			}
		}

	}

	private int maxim(Integer[] array, int leftIndex, int rightIndex) {
		int max = array[leftIndex];
		for (int i = leftIndex + 1; i <= rightIndex; i++) {
			if (array[i] > max)
				max = array[i];
		}
		return max;
	}

}
