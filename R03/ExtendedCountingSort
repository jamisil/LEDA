package sorting.linearSorting;

import sorting.AbstractSorting;

/**
 * Classe que implementa do Counting Sort vista em sala. Desta vez este
 * algoritmo deve satisfazer os seguitnes requisitos: - Alocar o tamanho minimo
 * possivel para o array de contadores (C) - Ser capaz de ordenar arrays
 * contendo numeros negativos
 */
public class ExtendedCountingSort extends AbstractSorting<Integer> {

	@Override
	public void sort(Integer[] array, int leftIndex, int rightIndex) {
		if (array != null && leftIndex < rightIndex && rightIndex < array.length && leftIndex >= 0) {
			int max = maxim(array, leftIndex, rightIndex);
			int min = min(array, leftIndex, rightIndex);

			// cria Array Counting
			int[] C = new int[max - min + 1];

			// "anotando" a frequência
			for (int i = leftIndex; i <= rightIndex; i++) {
				C[array[i] - min]++;
			}
			// acumulando de maneira a determinar quantos elementos são menores até
			// determinado indice
			for (int j = 1; j < C.length; j++) {
				C[j] += C[j - 1];
			}
			// criando o array em que ser inserido os numeros de maneira ordenada
			int[] B = new int[rightIndex - leftIndex + 1];

			for (int k = rightIndex; k >= leftIndex; k--) {
				B[C[array[k] - min] - 1] = array[k];
				C[array[k] - min]--;
			}
			// modificando o array
			for (int z = leftIndex; z <= rightIndex; z++) {
				array[z] = B[z - leftIndex];
			}

		}
	}

	private int maxim(Integer[] array, int leftIndex, int rightIndex) {
		int max = array[leftIndex];
		for (int i = leftIndex + 1; i <= rightIndex; i++) {
			if (array[i] > max)
				max = array[i];
		}
		return max;
	}

	private int min(Integer[] array, int leftIndex, int rightIndex) {
		int min = array[leftIndex];
		for (int i = leftIndex + 1; i <= rightIndex; i++) {
			if (array[i] < min)
				min = array[i];
		}
		return min;
	}

}
